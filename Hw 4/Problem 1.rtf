{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red15\green112\blue1;
\red0\green0\blue255;\red0\green0\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c50196\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c0\c0\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hw 3\
\
Part A.\
	1.\
		The alternative code to read a comma delimited text  still works and is a more functional style due to the use of map and reduce. Map allows for a function to be run on all elements of a sequence. In this case our sequence  first starts with all the lines in the file which we determined using getLines. The code broken down as follows:\
		
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .map(_.split(
\f2\b \cf4 \strokec4 ","
\f1\b0 \cf2 \strokec2 , -\cf5 \strokec5 1\cf2 \strokec2 )) takes the sequence of lines and splits them up into each word in the line (aka tokens)\
		.map(a => a.map(z => 
\f2\b \cf6 \strokec6 if 
\f1\b0 \cf2 \strokec2 (z == 
\f2\b \cf4 \strokec4 ""
\f1\b0 \cf2 \strokec2 ) \cf5 \strokec5 1 
\f2\b \cf6 \strokec6 else 
\f1\b0 \cf5 \strokec5 0\cf2 \strokec2 )) then looks through each word \cf2 \cb3 \outl0\strokewidth0 (a) \cf2 \cb3 \outl0\strokewidth0 \strokec2 in the line  and determines if it is a null value or not. Creating a sequence for each line with a value of 0 or 1 in the location of each word. \
		.reduce((x, y) => (x zip y).map \{ 
\f2\b \cf6 \strokec6 case 
\f1\b0 \cf2 \strokec2 (u, v) => u + v \}) Because there is now a sequence of 0 or 1\'92s for each line we must combine all of these sequences to determine the total number of null values in each column (combine into one sequence). Reduce allows for the comparison/combitionation of two sequences and the additional map looks at the values at a given position in both sequences and adds them together. 
\f3 \cb1 \

\f1 \cb3 		\
\
	2.\
		The 32bit binary : 01001001100101100000001011010010\
\
\
	
\f3 \cb1 \
\
}